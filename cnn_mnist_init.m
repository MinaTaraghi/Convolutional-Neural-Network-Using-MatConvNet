function net = cnn_mnist_init(FN,FS,batch_size,train_ratio, valid_ratio, stage_size, pool_function,epoch_no,...
  learning_rate,conv_stride,pool_stride,varargin)
% CNN_MNIST_LENET Initialize a CNN similar for MNIST
opts.useBatchNorm = true ;
opts.networkType = 'simplenn' ;
opts = vl_argparse(opts, varargin) ;
w=27;
if(pool_function==1)
    pool='max';
else
    pool='avg';
end
rng('default');
rng(0) ;

f=1/100 ;
net.layers = {} ;
i=1;
net.layers{end+1} = struct('type', 'conv', ...
                           'weights', {{f*randn(FS(i),FS(i),1,FN(i), 'single'), zeros(1, FN(i), 'single')}}, ...
                           'stride', conv_stride, ...
                           'pad', 0) ;
net.layers{end+1} = struct('type', 'pool', ...
                           'method', pool, ...
                           'pool', [2 2], ...
                           'stride', pool_stride, ...
                           'pad', 0) ;
w=w-FS(i)+1;
w=floor(w/2);
for i=2:stage_size
net.layers{end+1} = struct('type', 'conv', ...
                           'weights', {{f*randn(FS(i),FS(i),FN(i-1),FN(i), 'single'), zeros(1, FN(i), 'single')}}, ...
                           'stride', conv_stride, ...
                           'pad', 0) ;
net.layers{end+1} = struct('type', 'pool', ...
                           'method', pool, ...
                           'pool', [2 2], ...
                           'stride', pool_stride, ...
                           'pad', 0) ;
w=w-FS(i)+1;
w=floor(w/2);
end
% net.layers{end+1} = struct('type', 'conv', ...
%                            'weights', {{f*randn(5,5,1,20, 'single'), zeros(1, 20, 'single')}}, ...
%                            'stride', 1, ...
%                            'pad', 0) ;
% net.layers{end+1} = struct('type', 'pool', ...
%                            'method', 'max', ...
%                            'pool', [2 2], ...
%                            'stride', 2, ...
%                            'pad', 0) ;
% net.layers{end+1} = struct('type', 'conv', ...
%                            'weights', {{f*randn(5,5,20,50, 'single'),zeros(1,50,'single')}}, ...
%                            'stride', 1, ...
%                            'pad', 0) ;
% net.layers{end+1} = struct('type', 'pool', ...
%                            'method', 'max', ...
%                            'pool', [2 2], ...
%                            'stride', 2, ...
%                            'pad', 0) ;
% net.layers{end+1} = struct('type', 'conv', ...
%                            'weights', {{f*randn(4,4,50,500, 'single'),  zeros(1,500,'single')}}, ...
%                            'stride', 1, ...
%                            'pad', 0) ;
net.layers{end+1} = struct('type', 'relu') ;
net.layers{end+1} = struct('type', 'conv', ...
                           'weights', {{f*randn(w,w,FN(stage_size),FN(stage_size), 'single'), zeros(1,FN(stage_size),'single')}}, ...
                           'stride', 1, ...
                           'pad', 0) ;
net.layers{end+1} = struct('type', 'conv', ...
                           'weights', {{f*randn(1,1,FN(stage_size),FN(stage_size),'single'), zeros(1,FN(stage_size),'single')}}, ...
                           'stride', 1, ...
                           'pad', 0) ;
net.layers{end+1} = struct('type', 'conv', ...
                           'weights', {{f*randn(1,1,FN(stage_size),10, 'single'), zeros(1,10,'single')}}, ...
                           'stride', 1, ...
                           'pad', 0) ;
net.layers{end+1} = struct('type', 'softmaxloss') ;

% optionally switch to batch normalization
if opts.useBatchNorm
  net = insertBnorm(net, 1) ;
  net = insertBnorm(net, 4) ;
  net = insertBnorm(net, 7) ;
end

% Meta parameters
net.meta.inputSize = [27 27 1] ;
net.meta.trainOpts.learningRate = learning_rate ;
net.meta.trainOpts.numEpochs = epoch_no;
net.meta.trainOpts.batchSize = batch_size;

% Fill in defaul values
net = vl_simplenn_tidy(net) ;

% Switch to DagNN if requested
switch lower(opts.networkType)
  case 'simplenn'
    % done
  case 'dagnn'
    net = dagnn.DagNN.fromSimpleNN(net, 'canonicalNames', true) ;
    net.addLayer('error', dagnn.Loss('loss', 'classerror'), ...
             {'prediction','label'}, 'error') ;
  otherwise
    assert(false) ;
end

% --------------------------------------------------------------------
function net = insertBnorm(net, l)
% --------------------------------------------------------------------
assert(isfield(net.layers{l}, 'weights'));
ndim = size(net.layers{l}.weights{1}, 4);
layer = struct('type', 'bnorm', ...
               'weights', {{ones(ndim, 1, 'single'), zeros(ndim, 1, 'single')}}, ...
               'learningRate', [1 1 0.05], ...
               'weightDecay', [0 0]) ;
net.layers{l}.biases = [] ;
net.layers = horzcat(net.layers(1:l), layer, net.layers(l+1:end)) ;
